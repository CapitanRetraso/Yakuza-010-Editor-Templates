//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: fighter_command.cfc
//   Authors: HeartlessSeph
//   Version: 1.00
//   Purpose: Kiwami 2 Fighter Command Mapping
//   History
//   1.00    06/01/2020  HeartlessSeph - started this
//------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------

LittleEndian();
local int h<hidden=true>;
local int i<hidden=true>;
local int j<hidden=true>;
local int k<hidden=true>;
local int currentpos;
local int textending;
local int dataarraystart<hidden=true>;
local int dataarrayblocks<hidden=true>;

struct File{

	struct FileHeader{
		uint32 filetype<name="Filetype">;
		uint16 Endianess<name = "Endianess ID">;
		uint16 unk;
		uint32 FileVersion<name="File Version">;
		uint32 filesize<name="Filesize">;
	}fileheader<name = "File Header">;

	struct TextData{
		for( j = 0; j < 99999; j++ )
		struct Text{
			ubyte textendcheck<hidden=true>;
			if (textendcheck == 204)
			{
				j = 99999;;
				FSkip(-1);
			}
			else
			{
				FSkip(-1);
				char StringValue[];
			}
		}text<read = GetString,name="String">;
        textending = FTell()+3;
	}textdata<name="String Data">;
	
	k = 4 - (FTell() % 4);
	for( j = 0; j < k; j++ )
	FSkip(1);
	dataarraystart = FTell();
	dataarrayblocks = ((fileheader.filesize) - dataarraystart) / 8;

	FSeek(fileheader.filesize);
	FSkip(-8);
	
	struct CommandSetTable{
		uint32 numstyletypes<name="Number of Command Sets">;
		i = FTell();
		FSkip(-12);
		uint32 commandtablestart<name="Pointer to Start of Table">;
		FSeek(commandtablestart);
		
		for( j = 0; j < numstyletypes; j++ ){
		struct CommandSetBlock{
			uint32 pointer<name="Command Set Pointer">;
			FSkip(4);
			if (pointer > textending)
			{
				h = FTell();
				FSeek(pointer);
				uint32 pointer2<name="Command Set Location", hidden=true>;
				FSkip(-4);
				char pointerval[]<name="Return 1 (For Reference, Don't Edit)", hidden=true>;
				if (pointer2 < fileheader.filesize){
					FSeek(pointer2);
					uint32 pointer3<hidden=true>;
					FSkip(-4);
					char pointerval2[]<name="Command Set Name">;
					FSeek(pointer);
				}
			}
			uint32 movesetnamepointer<name="Pointer to Moveset Name">;
			FSkip(4);
			uint32 commandID<name="Command Set ID">;
			FSkip(4);
			uint32 movetablepointer<name="Pointer to Move Table">;
			FSkip(4);
			uint32 weplistpointer<name="Pointer to Weapon List", comment= "Points to Current Command Set if number of weapon command sets is 0.">;
			FSkip(4);
			uint16 nummoves<name="Number of Moves">;
			uint16 numwepcommandsets<name="Number of Weapon Command Sets">;
			FSeek(movetablepointer);
			struct MovesetMovelist{
				for( k = 0; k < nummoves; k++ )
				struct MoveStruct{
					uint32 movepointer<name="Move Pointer">;
					FSkip(4);
					currentpos = FTell();
					FSeek(movepointer);
					uint32 movelocation<name="Move Location">;
					FSeek(movelocation);
					char MoveName[]<name="Move Name">;
					FSeek(currentpos);
				}movestruct<name="Move",read=GetMove>;
			}movesetmovelist<name="List of Moves">;
			FSeek(weplistpointer);
			struct WeaponMovesetList{
				for( k = 0; k < numwepcommandsets; k++ )
				struct WeaponMovesetStruct{
					uint32 wepsetpointer1<name="Weapon Command Set Pointer">;
					FSkip(4);
					currentpos = FTell();
					FSeek(wepsetpointer1);
					uint32 wepsetpointer2<name="Weapon Command Set Pointer">;
					FSeek(wepsetpointer2);
					uint16 unk<name="Unknown uint16",comment="Always equal to 01 00">;
					uint16 wepsetcommandid<name="Command Set ID",comment="You can find the value in the command set for the referenced weapon">;
					FSeek(currentpos);
				}weaponmovesetstruct<name="Weapon Moveset">;
			}weaponmovesetlist<name="List of Weapon Movesets">;
			FSeek(h);
		}commandsetblock<name="Command Set Block", read = GetCommandSet>;
		}
		FSeek(i);
	}commandsettable<name="Command Set Table">;

	FSeek(h);
}file<name="Fighter_Command.cfc">;



string GetString(Text& j)
{
    return j.StringValue;
}

string GetCommandSet(CommandSetBlock& j)
{
    return j.pointerval2;
}

string GetMove(MoveStruct& k)
{
    return k.MoveName;
}