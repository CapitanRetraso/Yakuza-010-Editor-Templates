//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: Yakuza Dragon Engine beps
//   Authors: HeartlessSeph
//   Version: 1.00
//   Purpose: Parses bep files for easier editing
//   History
//   1.00    28/12/2020  HeartlessSeph - started this
//------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------

#include "DEYakuza_bepenums.bt"

LittleEndian();
local int h<hidden=true>;
local int i<hidden=true>;
local int j<hidden=true>;
local int numintprops<hidden=true>;
local int result;

struct File{
	struct FileHeader{
		char filetype[4];
		uint32 unk;
		uint32 unk;
		uint32 unk;
	}fileheader<name="File Header">;
	
	struct startlock{
		byte lockarea[0x20];
	}startlocked<bgcolor=cRed, name="Section Lock",hidden=true>;
	
	
	for( j = 0; j < 999999; j++ ){
		struct Property{
			uint16 bonechecksum<name="Bone Checksum">;
			char bonename[30]<name="Bone Name">;
			uint16 PropertySection;
			uint16 PropertyType;
			uint32 PropertySize;
			numintprops = PropertySize/4;
			uint32 unkint;
			uint32 unkint;
			if (PropertySection == 12){
				PropertyTypes property<name="Property Type">;
				switch( PropertyType )
				{
					case 29  : result = 29; break;
					case 68  : result = 68; break;
					case 74  : result = 74; break;
					case 75  : result = 75; break;
					case 77  : result = 77; break;
					case 157 : result = 157; break;
					default : result = -1; break;
				}
				if (result == 29)
				//FlowdustEmitter
				{
						float activatetime<name="Activation Time">;
						float activedur<name="Active Time">;
						uint32 unk1;
						uint32 unk2;
						uint32 unk3;
						uint32 unk4;
						uint32 unk5;
						uint32 unk6;
						uint32 emittertype;
						uint32 unk8;
						uint32 unk9;
						uint32 unk10;
						uint32 unk11;
						uint32 unk12;
						uint32 unk13;
						uint32 unk14;
						uint32 unk15;
						uint32 unk16;
						uint32 unk17;
						uint32 unk18;
						uint32 unk19;
						if (emittertype == 9){
							uint32 unk20[12];
						
						}
						if (emittertype == 14){
							uint32 separator;
							float layer0red<name="Layer 0 Color (Red)">;
							float layer0green<name="Layer 0 Color (Green)">;
							float layer0blue<name="Layer 0 Color (Blue)">;
							float layer0bright<name="Layer 0 Brightness">;
							float layer1red<name="Layer 1 Color (Red)">;
							float layer1green<name="Layer 1 Color (Green)">;
							float layer1blue<name="Layer 1 Color (Blue)">;
							float layer1bright<name="Layer 1 Brightness">;
							float lifetime<name="Lifetime">;
							uint32 unk;
							float speed<name="Speed">;
							uint32 unk;
							float scatterspeed<name="Scatter Speed">;
							uint32 unk;
							float gravity<name="Gravity">;
							float verticalscatter<name="Vertical Scatter">;	
						}
				}
				//Control Lock
				if (result == 75){
					float spawnframe<name="Start Frame">;
					float endframe<name="End Frame">;
					uint32 null;
					uint32 null;
					uint32 null;
					uint32 unk<comment="Default = 2">;
					uint32 null;
					uint32 structnumber;
				}
				//Hitbox
				if (result == 77){
					float hitboxspawnframe<name="Hitbox Spawn Time">;
					float hitboxdespawnframe<name="Hitbox Lifetime">;
					uint32 unk;
					uint32 unk;
					uint32 unk;
					uint32 unk;
					uint32 unk;
					int32 damage<name="Damage">;
					uint32 knockback<name="Knockback Force">;
					HitboxLocations hitboxloc<name="Hitbox Location">;
					uint32 moveffect<name="Move Effect">;					
				}
				//Heat Gain/Loss
				if (result == 157){
					float hitboxspawnframe<name="Hitbox Spawn Time">;
					float hitboxdespawnframe<name="Hitbox Lifetime">;
					uint32 null;
					uint32 null;
					uint32 null;
					uint32 unk<comment="Default = 2">;
					uint32 null;
					int32 heatgain;
				}
				//Controller Rumble
				if (result == 68){
					float rumblestart<name="Rumble Start">;
					float rumbleduration<name="Rumble Duration">;
					uint32 unk1;
					uint32 unk2;
					uint32 unk3;
					uint32 unk4;
					uint32 unk5;
					uint32 unk6;
					uint32 padding2[8];
					uint32 unk7[8];
					if(PropertySize == 104){
					uint32 unk;
					}
				}
				//Follow Up
				if (result == 74){
					float followupstart<name="Follow-Up Frame Start">;
					float followuplen<name="Follow-Up Frame End">;
					uint32 unk;
					uint32 unk;
					uint32 unk;
					uint32 unk;
					uint32 unk;
					uint32 skillnum<name="Skill ID Number">;
				}
				if (result == -1){
					uint32 unk[numintprops-1];
				}
			}
			if (PropertySection == 17){
				PropertyTypes property<name="Property Type">;
				switch( PropertyType ) 
				{
					default : result = -1;
				}
				if (result == -1){
					uint32 unk[numintprops-1];
				}
			}
		}property<read=GetProperty,bgcolor=cBlue>;
			
		struct Lock2{
			byte lockarea[0x20];
		}lock2<bgcolor=cRed, name="Section Lock",hidden=true>;
		
		if (FTell()+48 == FileSize())
		break;		
	}	
}file;

string GetProperty(Property &j)
{
    string null = "";
	if (j.PropertySection == 17)
	{
		return "Lock on Structure?";
	}
    if (j.PropertySection == 12)
    {
		return EnumToString(j.property);
    }
};